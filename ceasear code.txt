import string

def caesar_cipher(text, shift, mode):
    """
    Encrypts or decrypts a text using Caesar cipher.

    Args:
        text: The text to encrypt or decrypt.
        shift: The number of positions to shift the letters.
        mode: "encrypt" or "decrypt".

    Returns:
        The encrypted or decrypted text.
    """

    if not isinstance(text, str):
        raise TypeError("Input text must be a string.")

    if mode not in ("encrypt", "decrypt"):
        raise ValueError("Invalid mode. Please enter 'e' or 'decrypt'.")

    if not shift or not isinstance(shift, int):
        raise ValueError("Invalid shift value. Please enter a non-zero integer.")

    alphabet = string.ascii_lowercase
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    translation_table = str.maketrans(alphabet + alphabet.upper(), shifted_alphabet + shifted_alphabet.upper())

    if mode == "encrypt":
        return text.translate(translation_table)
    else:
        return caesar_cipher(text, -shift, "encrypt")  # Decrypt by shifting back


def main():
    while True:
        try:
            mode = input("Enter 'e' for encrypt or 'd' for decrypt: ").lower()
            if mode not in ("e", "d"):
                raise ValueError("Invalid mode. Please enter 'e' or 'd'.")

            if mode == "e":
                mode = "encrypt"
            elif mode == "d":
                mode = "decrypt"

            text = input("Enter your message: ")
            if not text:
                raise ValueError("Please enter a non-empty message.")

            shift = int(input("Enter the shift value (1-25): "))
            if not shift or shift < 1 or shift > 25:
                raise ValueError("Invalid shift value. Please enter a number between 1 and 25.")

            result = caesar_cipher(text, shift, mode)
            print(f"{mode.title()}d message: {result}")

            if input("Continue? (y/n): ").lower() != "y":
                break

        except (TypeError, ValueError) as e:
            print(f"Error: {e}")
            continue

    print("Exiting...")


if __name__ == "__main__":
    main()
